import React, { useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { setActiveFilter, selectFilteredTasks } from "../store/taskSlice";

const Sidebar = () => {
  const dispatch = useDispatch();
  const activeFilter = useSelector((state) => state.tasks.activeFilter);
  const tasks = useSelector(selectFilteredTasks);
  const totalTasks = tasks.length;
  const completedTasks = tasks.filter((t) => t.completed).length;

  const navigationItems = [
    {
      id: "all",
      label: "All Tasks",
      icon: (
        <svg
          width="20="
          height="22"
          viewBox="0 0 20 22"
          fill="none"
          style={{ color: "green" }}
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M5.99797 14.9334H9.99797M5.99797 9.93341H13.998M5.49997 2.43341C3.94397 2.48041 3.01697 2.65341 2.37497 3.29541C1.49597 4.17541 1.49597 5.59041 1.49597 8.42141V14.9274C1.49597 17.7594 1.49597 19.1744 2.37497 20.0544C3.25297 20.9334 4.66797 20.9334 7.49597 20.9334H12.496C15.325 20.9334 16.739 20.9334 17.617 20.0534C18.497 19.1744 18.497 17.7594 18.497 14.9274V8.42141C18.497 5.59141 18.497 4.17541 17.617 3.29541C16.976 2.65341 16.048 2.48041 14.492 2.43341"
            stroke="black"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
          <path
            d="M5.49597 2.68341C5.49597 1.71741 6.27997 0.933411 7.24597 0.933411H12.746C13.2101 0.933411 13.6552 1.11779 13.9834 1.44597C14.3116 1.77416 14.496 2.21928 14.496 2.68341C14.496 3.14754 14.3116 3.59266 13.9834 3.92085C13.6552 4.24904 13.2101 4.43341 12.746 4.43341H7.24597C6.78184 4.43341 6.33672 4.24904 6.00853 3.92085C5.68035 3.59266 5.49597 3.14754 5.49597 2.68341Z"
            stroke="black"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      ),
    },
    {
      id: "today",
      label: "Today",
      icon: (
        <svg
          width="20"
          height="22"
          viewBox="0 0 20 22"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M19 8.93341H1M14 0.933411V4.93341M6 0.933411V4.93341M5.8 20.9334H14.2C15.8802 20.9334 16.7202 20.9334 17.362 20.6064C17.9265 20.3188 18.3854 19.8599 18.673 19.2954C19 18.6536 19 17.8136 19 16.1334V7.73341C19 6.05325 19 5.21317 18.673 4.57144C18.3854 4.00695 17.9265 3.54801 17.362 3.26039C16.7202 2.93341 15.8802 2.93341 14.2 2.93341H5.8C4.11984 2.93341 3.27976 2.93341 2.63803 3.26039C2.07354 3.54801 1.6146 4.00695 1.32698 4.57144C1 5.21317 1 6.05325 1 7.73341V16.1334C1 17.8136 1 18.6536 1.32698 19.2954C1.6146 19.8599 2.07354 20.3188 2.63803 20.6064C3.27976 20.9334 4.11984 20.9334 5.8 20.9334Z"
            stroke="black"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      ),
    },
    {
      id: "important",
      label: "Important",
      icon: (
        <svg
          width="24"
          height="25"
          viewBox="0 0 24 25"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M22.4225 10.0514C22.3287 9.76315 22.1517 9.50909 21.9138 9.32124C21.6759 9.13339 21.3877 9.02015 21.0856 8.99578L15.5543 8.54953L13.4187 3.38484C13.3032 3.10342 13.1066 2.8627 12.854 2.69328C12.6013 2.52387 12.304 2.43341 11.9998 2.43341C11.6956 2.43341 11.3983 2.52387 11.1456 2.69328C10.893 2.8627 10.6964 3.10342 10.5809 3.38484L8.44714 8.54859L2.91308 8.99578C2.61043 9.02138 2.32207 9.13572 2.08412 9.32447C1.84617 9.51323 1.66921 9.76801 1.57542 10.0569C1.48163 10.3458 1.47517 10.6559 1.55686 10.9485C1.63855 11.241 1.80475 11.5029 2.03464 11.7014L6.25339 15.3417L4.96808 20.7848C4.8962 21.0806 4.9138 21.391 5.01865 21.6767C5.1235 21.9623 5.31087 22.2104 5.55698 22.3894C5.80309 22.5685 6.09684 22.6703 6.40093 22.6821C6.70503 22.6938 7.00576 22.6149 7.26496 22.4555L11.9993 19.5417L16.7365 22.4555C16.9958 22.6131 17.2959 22.6904 17.5991 22.6778C17.9022 22.6651 18.1949 22.5631 18.4401 22.3845C18.6854 22.2058 18.8724 21.9586 18.9774 21.674C19.0825 21.3894 19.101 21.08 19.0306 20.7848L17.7406 15.3408L21.9593 11.7005C22.1911 11.5023 22.3588 11.2398 22.4412 10.9462C22.5237 10.6527 22.5172 10.3413 22.4225 10.0514ZM20.9843 10.5642L16.4187 14.5017C16.3146 14.5915 16.2371 14.7081 16.1948 14.8389C16.1525 14.9697 16.1469 15.1096 16.1787 15.2433L17.5737 21.1308C17.5773 21.1389 17.5777 21.1481 17.5747 21.1565C17.5717 21.1648 17.5657 21.1717 17.5578 21.1758C17.5409 21.1889 17.5362 21.1861 17.5221 21.1758L12.3921 18.0211C12.274 17.9485 12.138 17.91 11.9993 17.91C11.8606 17.91 11.7247 17.9485 11.6065 18.0211L6.47652 21.1777C6.46246 21.1861 6.45871 21.1889 6.44089 21.1777C6.43298 21.1736 6.42692 21.1667 6.42395 21.1583C6.42099 21.15 6.42135 21.1408 6.42496 21.1327L7.81996 15.2452C7.85175 15.1114 7.84618 14.9715 7.80385 14.8407C7.76153 14.71 7.68407 14.5933 7.57996 14.5036L3.01433 10.5661C3.00308 10.5567 2.99277 10.5483 3.00214 10.5192C3.01152 10.4902 3.01902 10.4939 3.03308 10.492L9.02558 10.0083C9.16303 9.99649 9.29456 9.94702 9.40571 9.86531C9.51686 9.78361 9.60332 9.67282 9.65558 9.54516L11.9637 3.95672C11.9712 3.94078 11.974 3.93328 11.9965 3.93328C12.019 3.93328 12.0218 3.94078 12.0293 3.95672L14.3431 9.54516C14.3958 9.67287 14.4828 9.78353 14.5945 9.86493C14.7062 9.94632 14.8382 9.99528 14.9759 10.0064L20.9684 10.4902C20.9825 10.4902 20.9909 10.4902 20.9993 10.5173C21.0078 10.5445 20.9993 10.5548 20.9843 10.5642Z"
            fill="black"
          />
        </svg>
      ),
    },
    {
      id: "planned",
      label: "Planned",
      icon: (
        <svg
          width="24"
          height="25"
          viewBox="0 0 24 25"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M23.25 6.93341C23.25 6.63341 23.1 6.40841 22.875 6.25841L17.625 3.25841C17.475 3.18341 17.4 3.18341 17.25 3.18341C17.1 3.18341 17.025 3.18341 16.875 3.25841L12 6.03341L7.125 3.25841C6.975 3.18341 6.9 3.18341 6.75 3.18341C6.6 3.18341 6.525 3.18341 6.375 3.25841L1.125 6.25841C0.9 6.40841 0.75 6.63341 0.75 6.93341V21.9334C0.75 22.3834 1.05 22.6834 1.5 22.6834C1.65 22.6834 1.725 22.6084 1.875 22.6084L6.75 19.8334L11.625 22.6084C11.775 22.6834 11.85 22.6834 12 22.6834C12.15 22.6834 12.225 22.6834 12.375 22.6084L17.25 19.8334L22.125 22.6084C22.2 22.6834 22.35 22.6834 22.5 22.6834C22.95 22.6834 23.25 22.3834 23.25 21.9334V6.93341ZM2.25 7.38341L6 5.20841V18.4834L2.25 20.6584V7.38341ZM11.25 20.6584L7.5 18.4834V5.20841L11.25 7.38341V20.6584ZM16.5 18.4834L12.75 20.6584V7.38341L16.5 5.20841V18.4834ZM18 18.4834V5.20841L21.75 7.38341V20.6584L18 18.4834Z"
            fill="black"
          />
        </svg>
      ),
    },
    {
      id: "assigned",
      label: "Assigned to me",
      icon: (
        <svg
          width="24"
          height="25"
          viewBox="0 0 24 25"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M14.8488 16.593C17.2578 16.593 19.2174 14.6334 19.2174 12.2256C19.2174 9.81544 17.2572 7.85584 14.8488 7.85584C12.4398 7.85584 10.4796 9.81604 10.4796 12.2256C10.4796 14.6334 12.4398 16.593 14.8488 16.593ZM14.8488 8.57464C15.8164 8.57607 16.7439 8.96118 17.4278 9.6455C18.1118 10.3298 18.4965 11.2575 18.4974 12.225C18.4963 13.1923 18.1115 14.1196 17.4275 14.8035C16.7435 15.4875 15.8161 15.8721 14.8488 15.873C13.8815 15.8721 12.9541 15.4875 12.2699 14.8036C11.5858 14.1197 11.2009 13.1924 11.1996 12.225C11.2002 10.2126 12.837 8.57464 14.8488 8.57464ZM22.827 20.7282C22.6356 17.3178 19.5372 17.109 19.4862 17.1072L10.191 17.1078C10.1598 17.109 7.06083 17.3184 6.87003 20.748V23.3328C6.87003 23.4283 6.90796 23.5199 6.97547 23.5874C7.04299 23.6549 7.13455 23.6928 7.23003 23.6928H22.467C22.5625 23.6928 22.6541 23.6549 22.7216 23.5874C22.7891 23.5199 22.827 23.4283 22.827 23.3328V20.7282ZM22.1076 22.9728H7.59063L7.59003 20.7678C7.74363 18.0108 10.1304 17.832 10.2108 17.8266L19.4652 17.826C19.5666 17.8326 21.9528 18.0114 22.107 20.748L22.1076 22.9728ZM7.57083 12.2988H7.57323C8.31303 12.2934 8.95383 12.0282 9.47763 11.5092C10.002 10.9854 10.2672 10.3446 10.2672 9.60364C10.2672 8.85904 10.0014 8.21704 9.47763 7.69744C8.95323 7.17364 8.31243 6.90784 7.57203 6.90784C6.82743 6.90784 6.18543 7.17364 5.66703 7.69684C5.14263 8.21704 4.87683 8.85904 4.87683 9.60364C4.87683 10.344 5.14263 10.9854 5.66643 11.5086C6.18603 12.0282 6.82623 12.294 7.57083 12.2988ZM5.98623 8.01544C6.42423 7.57324 6.94383 7.35784 7.57263 7.35784C8.19783 7.35784 8.71743 7.57324 9.16083 8.01724C9.60303 8.45524 9.81843 8.97484 9.81843 9.60424C9.81843 10.23 9.60303 10.749 9.16083 11.1906C8.71863 11.6292 8.19843 11.8452 7.57263 11.85C6.94263 11.8452 6.42303 11.6304 5.98503 11.1912C5.54223 10.7496 5.32683 10.23 5.32683 9.60424C5.32683 8.97424 5.54223 8.45524 5.98623 8.01544Z"
            fill="black"
          />
          <path
            d="M7.22311 10.6234C7.26375 10.6591 7.31602 10.6787 7.37011 10.6786C7.40229 10.6785 7.43408 10.6716 7.46336 10.6582C7.49264 10.6449 7.51874 10.6255 7.53991 10.6012L9.06331 8.85522C9.10246 8.81027 9.12214 8.75161 9.11803 8.69214C9.11393 8.63267 9.08636 8.57727 9.04141 8.53812C8.99646 8.49898 8.93779 8.47929 8.87832 8.4834C8.81886 8.48751 8.76346 8.51507 8.72431 8.56002L7.34851 10.1368L6.67171 9.55182C6.64941 9.53252 6.62353 9.5178 6.59554 9.50849C6.56755 9.49919 6.538 9.49549 6.50859 9.49761C6.47917 9.49973 6.45046 9.50762 6.42409 9.52083C6.39772 9.53405 6.37421 9.55232 6.35491 9.57462C6.3356 9.59692 6.32088 9.6228 6.31158 9.65079C6.30228 9.67878 6.29858 9.70833 6.3007 9.73775C6.30282 9.76716 6.31071 9.79588 6.32392 9.82224C6.33713 9.84861 6.35541 9.87212 6.37771 9.89142L7.22311 10.6234ZM12.0777 6.81342C12.0777 6.81342 12.1821 6.66342 12.4485 6.57342C12.6543 6.50382 12.7857 6.48282 12.7857 6.48282V4.73142C12.7857 4.27062 12.4449 3.87102 11.9253 3.87102H10.6089V4.57902H12.0777V6.81342ZM5.39551 5.60922H9.74011C9.96211 5.60922 10.1703 5.45322 10.1703 5.17062V4.14342C10.1703 3.75222 9.85891 3.43242 9.46831 3.43242H9.30151C9.10831 2.68242 8.37511 2.13342 7.56331 2.13342C6.75151 2.13342 6.01831 2.68242 5.82571 3.43242H5.66731C5.27671 3.43242 4.95691 3.75222 4.95691 4.14342V5.17062C4.95691 5.42502 5.14231 5.60922 5.39551 5.60922ZM7.56331 3.00222C8.04451 3.00222 8.43211 3.38982 8.43211 3.87102C8.43211 4.35222 8.04451 4.73982 7.56331 4.73982C7.44915 4.74006 7.33607 4.71775 7.23055 4.67417C7.12504 4.6306 7.02917 4.56661 6.94845 4.48589C6.86772 4.40516 6.80374 4.30929 6.76016 4.20378C6.71658 4.09826 6.69427 3.98518 6.69451 3.87102C6.69451 3.38982 7.08211 3.00222 7.56331 3.00222Z"
            fill="black"
          />
          <path
            d="M9.57125 14.4679H3.05765V4.57873H4.52645V3.87073H3.21065C2.74985 3.87073 2.35925 4.26973 2.35925 4.73113V14.3239C2.35925 14.7847 2.74985 15.1663 3.21065 15.1663H10.2475C10.2475 15.1669 9.71465 14.9461 9.57125 14.4679Z"
            fill="black"
          />
        </svg>
      ),
    },
  ];

  return (
    <>
      {/* Profile Section - Moved up and centered */}
      <div className=" bg-[#EEF6EF] dark:bg-[#2C2C2C] relative mt-20 pb-10 w-full">
        <div style={{ height: "50px" }} />

        <div className="absolute top-0 left-1/2 -translate-x-1/2 -translate-y-1/2">
          <img
            src="/profile.png"
            alt="Profile"
            className="w-26 h-26 rounded-full mb-3"
          />
        </div>
        <h2 className="text-md font-medium text-center my-3">Hey, ABCD</h2>
        <button className="mx-20 bg-green-800 text-white py-1 px-4 rounded-md">
          Logout
        </button>
        {/* Navigation List */}
        <div className="mx-3 space-y-1 bg-[#FBFDFC] dark:bg-[#232323] py-4 my-2">
          {navigationItems.map((item) => (
            <button
              key={item.id}
              onClick={() => dispatch(setActiveFilter(item.id))}
              className={`w-full flex items-center gap-3 px-4 py-2 text-left rounded-lg
                ${
                  activeFilter === item.id
                    ? "bg-[#35793729] text-[#357937]"
                    : "hover:bg-white"
                }`}
            >
              <div className={activeFilter === item.id ? "text-[#4CAF50]" : ""}>
                {item.icon}
              </div>
              <span style={{ fontSize: "14px" }}>{item.label}</span>
            </button>
          ))}
        </div>

        {/* Add List Button */}
        <div className="px-8 py-6 mx-3 my-2 bg-[#FBFDFC] dark:bg-[#232323]">
          <button className="w-full flex items-center gap-3 px-4 py-2 text-left hover:bg-white rounded-lg">
            <svg
              width="24"
              height="25"
              viewBox="0 0 24 25"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M11.1667 13.7667H2V12.1001H11.1667V2.93341H12.8333V12.1001H22V13.7667H12.8333V22.9334H11.1667V13.7667Z"
                fill="black"
              />
            </svg>

            <span>Add list</span>
          </button>
        </div>

        {/* Today's Tasks Stats */}
        <div className="px-5 mx-3 bg-[#FBFDFC] dark:bg-[#232323]">
          <div className="p-3">
            <div className="flex items-center justify-between">
              <span className="text-sm font-medium ">Today Tasks</span>
              <img src="info.svg" />
            </div>
            <div className="mb-2">
              <span className="text-md">{totalTasks}</span>
            </div>
            <hr />

            {/* Progress Circle */}
            <div className="relative w-32 h-32 mx-auto mt-3 ">
              <svg viewBox="0 0 100 100" className="transform -rotate-90">
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  fill="none"
                  stroke="#4CAF50"
                  strokeWidth="10"
                  strokeDasharray={`${2 * Math.PI * 45}`}
                  strokeDashoffset={
                    2 * Math.PI * 45 * (1 - completedTasks / totalTasks)
                  }
                  className="transition-all duration-500"
                />
                <circle
                  cx="50"
                  cy="50"
                  r="45"
                  fill="none"
                  stroke="#2D3436"
                  strokeWidth="10"
                  strokeDasharray={`${2 * Math.PI * 45}`}
                  strokeDashoffset={
                    2 * Math.PI * 45 * (completedTasks / totalTasks)
                  }
                  className="transition-all duration-500"
                  transform={`rotate(${
                    360 * (completedTasks / totalTasks)
                  } 50 50)`}
                />
              </svg>
            </div>

            {/* Legend */}
            <div className="flex items-center justify-center gap-4 mt-3 text-xs">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 rounded-full bg-[#2D3436]"></div>
                <span>Pending</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 rounded-full bg-[#4CAF50]"></div>
                <span>Done</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Sidebar;
